<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.socar.web.mappers.MemberMapper">
 <select id="count" resultType="com.socar.web.domains.Retval">
    select count(*) as count from member
 </select>
 <select id="list" resultType="com.socar.web.domains.MemberDTO">
      select 
         id as id, 
         name as name, 
         pw as pw, 
         phone as phone, 
         address as address, 
         license_type as licenseType, 
         license_num as licenseNum,
         license_end as licenseEnd,
         license_start as licenseStart,
         birth as birth,
         gender as gender,
         email as email
      from member
</select>
 <select id="find" parameterType="com.socar.web.domains.Command" resultType="com.socar.web.domains.MemberDTO">
      select 
         id as id, 
         name as name, 
         pw as pw, 
         phone as phone, 
         address as address, 
         license_type as licenseType, 
         license_num as licenseNum,
         license_end as licenseEnd,
         license_start as licenseStart,
         birth as birth,
         gender as gender,
         email as email
      from member where ${keyField} = #{keyword}
   </select>
    <select id="existId" parameterType="string" resultType="int">
 select count(*) as count from member where id = #{id}</select>
<insert id="regist" parameterType="com.socar.web.domains.MemberDTO">
<!--  insert into member(
id, 
name, 
pw, 
phone, 
address,
license_type, 
license_num,
license_end,
license_start,
birth,
gender,
email
)values(#{id},#{name},#{pw},#{phone},#{address},#{licenseType},#{licenseNum},#{licenseEnd},#{licenseStart},#{birth},#{gender},#{email})
 --> 
call insert_member(#{id},#{name},#{pw},#{phone},#{address},#{licenseType},#{licenseNum},#{licenseEnd},#{licenseStart},#{birth},#{gender},#{email})
</insert>
<update id="update" parameterType="com.socar.web.domains.MemberDTO">
	update member set pw= #{pw} , email = #{email} , phone = #{phone} , address = #{address}, 
	license_type = #{licenseType}, license_num = #{licenseNum}, license_end = #{licenseEnd}, license_start = #{licenseStart}   
	where id = #{id}
</update>

<delete id="delete" parameterType="string">
delete from member where id=#{id}
</delete>
</mapper>